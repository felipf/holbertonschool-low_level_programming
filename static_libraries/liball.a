!<arch>
0-isupper.c/    0           0     0     644     244       `
#include "main.h"
/**
 *  * _isupper - letter is uppercase.
 *   * @c: the letter
 *    * Return: 1 if c is uppercase.
 *     */
int _isupper(int c)
{
		if ((c >= 65) && (c <= 90))
				{
							return (1);
								}
			else
						return (0);
}
0-memset.c/     0           0     0     644     404       `
#include "main.h"
/**
 *  * _memset - fills memory with a constant byte
 *   * @s: pointer to the array address
 *    * @b: is the added constant character or bytes
 *     * @n: the constant number of bytes b
 *      * Return: the initial position of the array.
 *       */
char *_memset(char *s, char b, unsigned int n)
{
		unsigned int i;


			for (i = 0; i < n; i++)
						s[i] = b;
				return (s);
}
0-strcat.c/     0           0     0     644     346       `
#include "main.h"
/**
 *  * _strcat - concatenate two strings
 *   * @dest: destination
 *    * @src: source
 *     * Return: dest
 *      */
char *_strcat(char *dest, char *src)
{
		int i;
			int j;


				for (i = 0; dest[i]; i++)
						{}
					for (j = 0; src[j]; j++, i++)
							dest[i] = src[j];
						src[j] = '\0';
							return (dest);
}
100-atoi.c/     0           0     0     644     607       `
#include "main.h"
#include <stdio.h>
#include <limits.h>
/**
 * _atoi - converts a string to an integer.
 * @s: the string
 * Return: The integer representation of the string
 */
int _atoi(char *s)
{
	int result = 0;
	int sign = 1;
	int digit;


	while (*s != '\0')
	{
		if (*s == '-')
		{
		sign *= -1;
		}
		else if (*s == '+')
		{
		}
		else if (*s >= '0' && *s <= '9')
		{
			digit = *s - '0';


		if (result > (INT_MAX - digit) / 10)
		{
			return (sign > 0 ? INT_MAX : INT_MIN);
		}
			result = result * 10 + digit;
		}
			else if (result > 0)
		{


			break;
		}
		s++;
	}
	return (sign * result);
}

1-isdigit.c/    0           0     0     644     234       `
#include "main.h"
/**
 *  * _isdigit - it is a digit.
 *   * @c: the letter
 *    * Return: 1 if is a digit.
 *     */
int _isdigit(int c)
{
		if ((c >= 48) && (c <= 57))
				{
							return (1);
								}
			else
						return (0);
}
1-memcpy.c/     0           0     0     644     336       `
#include "main.h"
/**
 *  * _memcpy - copy memory area.
 *   * @src: source
 *    * @dest: destination
 *     * @n: bytes
 *      * Return: pointer to dest.
 *       */
char *_memcpy(char *dest, char *src, unsigned int n)
{
		unsigned int i;


			for (i = 0; i < n; i++)
					{
								dest[i] = src[i];
									}
				return (dest);
}
1-strncat.c/    0           0     0     644     525       `
#include "main.h"
/**
 *  * *_strncat - concatenate n characters
 *   *
 *    * @dest: destination of the concatenated stirng
 *     * @src: stirng to concatenate
 *      * @n: number of characters to concatenate
 *       * Return: pointer to stirng concatenated
 *        */
char *_strncat(char *dest, char *src, int n)
{
		int x, y = 0;

			for (x = 0; dest[x]; x++)
						;

				while (src[y] != src[n])
						{
									dest[x + y] = src[y];
											y++;
												}
					dest[x + y] = '\0';
						return (dest);
}


2-strchr.c/     0           0     0     644     483       `
#include "main.h"
#include <stddef.h>
/**
 *  * _strchr - locates a character in a string.
 *   * @s: the string.
 *    * @c: the character to locate.
 *     * Return: char c through s.
 *      */
char *_strchr(char *s, char c)
{
		while (*s)
				{
							if (*s != c)
										{
														s++;
																}
									else
												{
																return (s);
																		}
										}
			if (c == '\0')
					{
								return (s);
									}
				return (NULL);
}

2-strlen.c/     0           0     0     644     216       `
#include "main.h"
#include <stdio.h>
/**
 * _strlen - returns the length of a string
 * @s: a string
 * Return: the length
 */
int _strlen(char *s)
{
	int c = 0;


	while (s[c] != '\0')
	{
		c++;
	}


	return (c);
}
2-strncpy.c/    0           0     0     644     327       `
#include "main.h"
/**
 * *_strncpy - copy a string
 * @dest: destination
 * @src: source
 * @n: bytes to use
 * Return: destination.
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;


	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}


	for (; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}

3-islower.c/    0           0     0     644     219       `
#include "main.h"
/**
 *  * _islower - is lowercase
 *   * @c: is a character
 *    * Return: 1 if c lowercase
 *     */
int _islower(int c)
{
		if ((c >= 97) && (c <= 122))
					return (1);
			else
						return (0);
}

3-puts.c/       0           0     0     644     241       `
#include "main.h"
#include <stdio.h>
/**
 * _puts - prints a string, to stdout
 * @str: the string.
 * Return: the result.
 */
void _puts(char *str)
{
	int i = 0;


	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     264       `
#include "main.h"
/**
 * _strcmp - compare two strings.
 * @s1: string 1
 * @s2: string 2
 * Return: 0.
 */
int _strcmp(char *s1, char *s2)
{
	int i = 0;


	while (s1[i] || s2[i])
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
	i++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     355       `
#include "main.h"
/**
 * _strspn - gets the length of a prefix substring.
 * @s: string
 * @accept: to find.
 * Return: bytes
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j;
	unsigned int rbytes = 0;


	for (i = 0; i <= 5; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
			{
				rbytes++;
			}
		}
	}
	return (rbytes);
}

4-isalpha.c/    0           0     0     644     274       `
#include "main.h"
/**
 * _isalpha - is a letter lower or uppercase
 * @c: is a letter
 * Return: 1 if It's is a letter lower or uppercase.
 */
int _isalpha(int c)
{
	if ((c >= 65) && (c <= 90))
		return (1);
	if ((c >= 97) && (c <= 122))
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     359       `
#include "main.h"
#include <stddef.h>
/**
 * _strpbrk - search a sring for any set of bytes
 * @s: the string
 * @accept: to find
 * Return: s or null.
 */
char *_strpbrk(char *s, char *accept)
{
	int i = 0, j;


	while (s[i])
	{
		j = 0;
		while (accept[j])
		{
			if (s[i] == accept[j])
			{
				return (&s[i]);
			}
			j++;
		}
		i++;
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     534       `
#include "main.h"
#include <stddef.h>
/**
 * _strstr - locates a substring.
 * @haystack: where we look for a certain string.
 * @needle: what we look for.
 * Return: location of beginning of substring, or null.
 */
char *_strstr(char *haystack, char *needle)
{
	int i, j = 0;


	while (needle[j])
	{
		j++;
	}
	while (*haystack)
	{
		i = 0;
		while (needle[i])
		{
			if (haystack[i] != needle[i])
			{
				break;
			}
			i++;
		}
		if (i != j)
		{
			haystack++;
		}
		else
		{
			return (haystack);
		}
		i++;
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     217       `
#include "main.h"
/**
 * _abs - computes the absolute value of an integer.
 * @i: number
 * Return: i absolute value
 */
int _abs(int i)
{
	if (i >= 0)
		return (i);
	if (i < 0)
	{
		i = (i * (-1));
	}
	return (i);
}

9-strcpy.c/     0           0     0     644     268       `
#include "main.h"
#include <stdio.h>
/**
 * _strcpy - function that copies the string pointed to by src.
 * @dest: the buffer
 * @src: the string
 *
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	sprintf(dest, "%s", src);
	return (dest);
}
main.c/         0           0     0     644     142       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}
_putchar.c/     0           0     0     644     314       `
#include <unistd.h>
/**
 *  *  * _putchar - writes the character c to stdout
 *   *   * @c: The character to print
 *    *    *
 *     *     * Return: On success 1.
 *      *      * On error, -1 is returned, and errno is set appropriately.
 *       *       */
int _putchar(char c)
{
			return (write(1, &c, 1));
}
